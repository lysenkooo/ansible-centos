---

- name: epel is installed
  yum: name=epel-release state=present

- name: mute old packages
  copy: src=excludes.repo dest=/etc/yum.repos.d/excludes.repo

- name: essentials are installed
  yum: name="{{ item }}" state=present
  with_items:
    - sudo
    - git
    - screen
    - libselinux-python
    - policycoreutils-python
    - curl
    - vim
    - wget
    - ntpdate
    - telnet
    - gnupg2
    - logrotate
    - python
    - python-devel
    - python-setuptools
    - zip
    - unzip

- name: pip is installed
  shell: curl -L bootstrap.pypa.io/get-pip.py | python
  args:
    creates: /usr/bin/pip

- name: sudo group is created
  group: name=sudo state=present

- name: sudo users can sudo with password
  lineinfile:
    dest: /etc/sudoers
    state: present
    line: "%sudo ALL=(ALL:ALL) ALL"
    regexp: "^%sudo"
    validate: 'visudo -cf %s'

- name: wheel group is created
  group: name=wheel state=present

- name: wheel users can sudo without password
  lineinfile:
    dest: /etc/sudoers
    state: present
    line: "%wheel ALL=(ALL:ALL) NOPASSWD: ALL"
    regexp: "^%wheel"
    validate: 'visudo -cf %s'

- name: rvm group is created
  group: name=rvm state=present

- name: deploy user has ssh key
  user: name="{{ user }}" groups="wheel,rvm" shell=/bin/bash generate_ssh_key=yes

- name: root login via ssh is disabled
  lineinfile: dest=/etc/ssh/sshd_config state=present line="PermitRootLogin no" regexp="^#?PermitRootLogin"
  notify:
    - restart sshd

- name: set time zone
  file: src=/usr/share/zoneinfo/Europe/Moscow path=/etc/localtime state=link
  notify:
    - sync time

# selinux

- name: check selinux httpd_can_network_connect
  shell: getsebool httpd_can_network_connect
  register: result
  changed_when: false

- name: allow network connections for SELinux
  shell: setsebool -P httpd_can_network_connect 1
  when: result.stdout.endswith(" --> off")

# mail

- name: redirect deploy user emails to root
  lineinfile:
    dest: /etc/aliases
    state: present
    line: "{{ user }}: root"
    regexp: "^{{ user }}:"

- name: all emails sent to admin address
  lineinfile:
    dest: /etc/aliases
    state: present
    line: "root: {{ email }}"
    regexp: "^root:"

# backups

- name: rotate backup script is installed
  copy: src=rbackup dest=/usr/bin/rbackup mode=0755

- name: git backup script is installed
  copy: src=gbackup dest=/usr/bin/gbackup mode=0755

- name: git backup script is added to crontab
  cron: name=gbackup minute=0 hour=3 job="/usr/bin/gbackup /var/backups/cfg >> /var/log/gbackup.log 2>&1"
  become_user: "{{ user }}"

# env

- name: variables are set
  lineinfile:
    dest: "/home/{{ user }}/.bash_profile"
    line: "{{ item }}"
    create: yes
  with_items:
    - "EDITOR=vim"
    - "ENV=production"
    - "RAILS_ENV=production"

# includes

- include: swap.yml
